{"version":3,"file":"authController.js","sourceRoot":"/","sources":["controllers/authController.ts"],"names":[],"mappings":"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","sourcesContent":["import * as jwt from 'jsonwebtoken';\nimport {User} from \"../database/schemas/User\";\nimport {compare_password, hash_password} from \"../utils/helpers\";\n\n// Function for verifying JWT token\nexport const verifyToken = (req, res, next) => {\n  const auth_header = req.headers[\"authorization\"];\n  if (auth_header) {\n    const token = auth_header.split(\" \")[1];\n    jwt.verify(token, process.env.JWT_SECRET_KEY, (err, decoded) => {\n      if (err) {\n        return res.status(401).json({ error: \"Invalid token\" });\n      } else {\n        req.userId = decoded.userId;\n        next();\n      }\n    });\n  } else {\n    return res.status(401).json({ error: \"Token not provided\" });\n  }\n};\n\n// User registration function\nexport const register = async (req, res) => {\n  try {\n    let { username, email, password } = req.body;\n    if (!username) {\n      res.status(400).json({ error: \"Username field is required\" });\n    } else if (!email) {\n      res.status(400).json({ error: \"Email field is required\" });\n    } else if (!password) {\n      res.status(400).json({ error: \"Password field is required\" });\n    } else {\n      const user_db = await User.findOne({ where: { email } });\n      if (user_db) {\n        res.status(400).json({ error: \"Email already exist\" });\n      } else {\n        // Hash the password\n        const hashedPassword = hash_password(password);\n        // Create a user record in the database\n        const new_user: any = await User.create({\n          username,\n          email,\n          password: hashedPassword,\n        });\n        // Generate JWT token\n        const token = jwt.sign(\n          { userId: new_user.id },\n          process.env.JWT_SECRET_KEY,\n          { expiresIn: \"1h\" }\n        );\n        res.json({ message: \"User registered successfully\", token });\n      }\n    }\n  } catch (error) {\n    res.status(500).json({ error: \"Registration failed\" });\n  }\n};\n\n// User login function\nexport const login = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    if (!email) {\n      res.status(400).json({ error: \"Email field is required\" });\n    } else if (!password) {\n      res.status(400).json({ error: \"Password field is required\" });\n    } else {\n      // Find the user by email\n      const user_db: any = await User.findOne({ where: { email } });\n\n      if (!user_db) {\n        return res.status(404).json({ error: \"User not found\" });\n      } else {\n        // Compare the provided password with the hashed password\n        const passwordMatch = compare_password(password, user_db.password);\n        if (!passwordMatch) {\n          return res.status(401).json({ error: \"Invalid password\" });\n        } else {\n          // Generate JWT token\n          const token = jwt.sign(\n            { userId: user_db.id },\n            process.env.JWT_SECRET_KEY,\n            { expiresIn: \"1h\" }\n          );\n          res.json({ message: \"Login successful\", token });\n        }\n      }\n    }\n  } catch (error) {\n    res.status(500).json({ error: \"Login failed\" });\n  }\n};\n"]}